#!/usr/bin/env bash

#
#   _____
#  / ____|
# / |     _____ ____ __     __ ____
# | |____/ ___|/ __ \\ \   / // __ \
# | |___|| |  / /  \ \\ \ / // /  \ \
# | |    | |  \ \__/ / \_  / \ \__/ /
# |_|    |_|   \____/   / /   \____/
#                      / /
#                     /_/
#
# Copyright (C) 2024, alemontn
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# exit on errors
set -e

# find /lib/froyo based on froyo's executable location
if [ "${0::4}" == "/usr" ]
then
  libfy=/usr/lib/froyo
else
  libfy=/lib/froyo
fi

# declare flags & what they do
flags=("werror" "comments" "noComments" "noticeFroyo" "module" "noerror" "allowExternal")
flag_descriptions=(
  "treat warnings as errors"
  "keep comments from source in compiled file"
  "don't add comments from source or compiler"
  "add comment explaining that the script was compiled from Froyo"
  "compile for an external module (don't include shebang + use werror flag)"
  "ignore errors & produce broken script"
  "don't error out when command isn't a builtin or module"
)
# flags set by default
def_flags=("noComments")
eflags=(${def_flags[@]})

# supported value types
TYPES=(string integer character float boolean pointer array)

# colours!
none=$'\e[0m'
bold=$'\e[1m'
yellow=$'\e[1;33m'
red=$'\e[1;31m'

fatal()
{
  # the default exit code is 1 but can be changed if desired
  ret=1
  if [ ${#1} -eq 1 ] && [ -z "${1//[0-9]}" ]
  then
    ret=$1
    # move to the next argument
    shift
  fi

  if [ -n "$infile" ] && [ ! "$infile" == /dev/stdin ]
  then
    add_err+=" $infile"
  fi

  if [ ! ${#cur} -eq 0 ]
  then
    add_err+="($cur):"
  elif [ ! ${#infile} -eq 0 ]
  then
    add_err+=":"
  fi

  echo $red"fatal:"$none"$add_err" "$@" >&2

  if flag "noerror"
  then
    # to avoid repeating error data
    add_err=
    return
  fi

  # `dontrm` is specified in the overwrite error
  if [ ! "$out" == /dev/stdout ] && [ -z "$dontrm" ]
  then
    rm -f "$out"
  fi

  # exit on the provided code
  exit $ret
}

warn()
{
  echo $yellow"warning:"$none "$@" >&2

  if flag "werror"
  then
    fatal "werror is set, exiting"
  fi
}

debug()
{
  :
}

out()
{
  in="$@"
  if ! { flag "noComments" && [ "${in::1}" == "#" ] && [ ! "${in::2}" == "#!" ]; }
  then
    while read nl
    do
      _eval_notation <<<"$nl" >>"$out"
    done \
     <<<"$in"
  fi
}

flag()
{
  case "$1" in
    "add")
      shift
      eflags+=("$1")
      ;;
    "rm")
      shift
      eflags=(${eflags//"$1"})
      ;;
    "ls")
      shift
      if [[ " ${eflags[@]} " == *" $1 "* ]]
      then
        return
      fi
      return 1
      ;;
    *)
      # loop through enabled flags
      for flag in ${eflags[@]}
      do
        if [ "$flag" == "$1" ]
        then
          return
        else
          continue
        fi
      done
      return 1
      ;;
  esac
}

flag_conflict()
{
  warn "flag <'$1'> is conflicting with <'$2'>, disabling <'$2'>"
  flag rm "$2"
}

ffunction()
{
  if [[ " ${functions[@]} " == *" $1 "* ]]
  then
    return
  fi
  return 1
}

internal()
{
  builtins=($(compgen -b))
  if [[ " ${builtins[@]} " == *" $1 "* ]]
  then
    return
  fi
  return 1
}

usage()
{
  # get Z from x/y/Z
  basename="${0##*'/'}"

  echo "\
Usage: $basename [ARGUMENTs] INPUT
Compile Froyo source code to a bash script

Arguments:
 -h, --help        show this help prompt
 -v, --verbose     show more information
 -V, --version     show froyo's local version
 -c, --stdin       use stdin for input instead of looking for input file
 -o, --output      specify the output bash file
 -w, --overwrite   overwrite existing file contents (be careful!)
 -l, --list-flags  list available flags
 -y, --eflag       enable a flag
 -n, --dflag       disable a flag
" &&
    exit 0
}

version()
{
  echo $bold"froyo"$none "pre" "(15:01 16/06/2024 BST)"
  exit 0
}

list_flags()
{
  _seperator()
  {
    m=14
    declare -i c=${#flag}

    until [ $c -eq $m ]
    do
      echo -n " "
      c+=1
    done
    echo -n "="
  }

  declare -i loop=0
  for flag in ${flags[@]}
  do
    _def_set="-"
    if [[ " ${def_flags[@]} " == *" $flag "* ]] && flag ls "$flag"
    then
      _def_set="*"
    elif flag ls "$flag"
    then
      _def_set="+"
    fi
    echo "[$_def_set] $flag$(_seperator) ${flag_descriptions[$loop]}"
    loop+=1
  done &&
    exit 0
}

_get_arg_val()
{
  argn="$1"
  arg="$2"
  next="$3"

  if [ "${arg::2}" == "-${argn::1}" ] && [ -n "${arg::3}" ]
  then
    echo -n "${arg:2}"
  elif [ ! ${#next} -eq 0 ]
  then
    echo -n "$arg"
  fi
}

sys_args=($@)

if [ $# -eq 0 ]
then
  set -- "--help"
fi

while [ ! $# -eq 0 ]
do
  case "$1" in
    "--help"|"-h")
      usage
      ;;
    "--verbose"|"-v")
      debug()
      {
        _class="$1"; shift
        _info="$@"
        echo "($_class)" "$_info" >&2
      }
      ;;
    "--version"|"-V")
      version
      ;;
    "--output"|"-o"*)
      out=$(_get_arg_val "output" "$1" "$2")

      # - represents stdout
      if [ "$out" == "-" ]
      then
        out=/dev/stdout
      fi
      ;;
    "--stdin"|"-c")
      infile=/dev/stdin
      if [ ! -p $infile ]
      then
        warn "provided argument <'stdin'> but not running from a pipe"
      fi
      ;;
    "--eflag"|"-y"*)
      flag add "$(_get_arg_val "y" "$1" "$2")"
      ;;
    "--dflag"|"-n"*)
      flag rm "$(_get_arg_val "n" "$1" "$2")"
      ;;
    "--list-flags"|"-l")
      list_flags
      ;;
    "--overwrite"|"-w")
      overwrite=1
      ;;
    "-"*)
      fatal "invalid argument $1 provided"
      ;;
    *)
      if [ ${#infile} -eq 0 ] && [ -f "$1" ]
      then
        infile="$1"
      else
        fatal "cannot provide multiple files to compile"
      fi
      ;;
  esac
  shift
done

# FLAG STUFF

for eflag in ${eflags[@]}
do
  debug "flag" "flag <'$eflag'> is set"
done

for pflag in "comments" "noticeFroyo"
do
  if flag "noComments" && flag "$pflag"
  then
    flag_conflict "$pflag" "noComments"
  fi
done

if flag "module"
then
  flag add "werror"
fi

if [ ${#infile} -eq 0 ]
then
  fatal "input file not provided"
elif [ ! "$infile" == /dev/stdin ] && [ ! -f "$infile" ]
then
  fatal "input file <'$1'> does not exist"
fi

if [ ${#out} -eq 0 ]
then
  warn "output file not provided"
fi

if [ ${#out} -eq 0 ] && [ ! "$infile" == /dev/stdin ]
then
  out="${infile%'.fy'}"
   out="${out##*'/'}"
elif [ ${#out} -eq 0 ] && [ "$infile" == /dev/stdin ]
then
  out="out"
fi

# SOURCE PARSING

src="$(<$infile)"
# preserve backslaches in source
src="${src//'\'/'\\'}"

# PARSE

# set integer for current line
declare -i cur=0
# declare ARRAY
declare -a type

_print_line()
{
  printf "%s\n" "${line[@]//'\'/'\\'}"
}

_eval_typeline()
{
  while read tl
  do
    prev=$cur
    # increment current line by 1
    cur+=1

    if [ "${type[$prev]}" == "function" ]
    then
      type[$cur]="codeblock"
    fi

    if [ "${type[$prev]}" == "ml_comment" ] && [ ! "${tl: -2}" == "*/" ]
    then
      type[$cur]="ml_comment"
    elif [ "${tl: -2}" == "*/" ]
    then
      type[$cur]="end_ml_c"
    else
      case "$tl" in
        # shebang
        "#!/usr/bin/env bash")                       type[$cur]="nospace";;
        # single line comment
        "//"*)                                       type[$cur]="sl_comment";;
        # multi line comment
        "/*"*)                                       type[$cur]="ml_comment";;
        # a function
        "function "*|"fn "*)                         type[$cur]="function";;
        # function inside a function
        "subfunction "*|"subfn "*)                   type[$cur]="subfn";;
        # piped code that will be ran
        [a-z]*"("*")"*"|"*[a-z]*"("*")"|[a-z]*"("*")"*"|"*[a-z]*"("*")"*'\') type[$cur]="pipe";;
        # suffixed-if
        [a-z]*"("*")"*" if"*)                        type[$cur]="suffixif";;
        # an if statement
        "if "*)                                      type[$cur]="if";;
        # block containing code
        "{"|"{"*'\')                                 type[$cur]="codeblock";;
        # add if to an else statement
        *"else if"*)                                 type[$cur]="elseif";;
        # else to if statement
        *"else"*)                                    type[$cur]="else";;
        # for each in <...>
        "foreach("*", "*")"|"foreach("*", "*")"*'\') type[$cur]="foreach";;
        # while loop
        "while("*")"|"while("*")"*'\')               type[$cur]="while";;
        # switch statement
        "switch("*")"|"switch("*")"*'\')             type[$cur]="switch";;
        # match for switch statement
        "case("*")"|"case("*")"*'\')                 type[$cur]="case";;
        # end codeblock
        "}"|"}"*'\')                                 type[$cur]="endblock";;
        # include external
        "include "*)                                 type[$cur]="include";;
        # declaring a value with attributes
        *": "*" = "*)                                type[$cur]="value_attr";;
        # code that will be ran
        [a-z]*"("*")"|a-z]*"("*")"*'\')              type[$cur]="run";;
        # define plain value with attributes & infer type
        *" = "*)                                     type[$cur]="value";;
        # appending to a value
        *" += "*|*" ++"|*" ++"*'\')                  type[$cur]="append";;
        # declaring a value
        *": "*)                                      type[$cur]="define";;
        # ignore the line because it is empty
        "")                                          type[$cur]="head";;
        # all else fails
        *) fatal                                     "failed to determine type of code";;
      esac
    fi

    line[$cur]="$tl"

    if [ $_DEBUG -eq 1 ]
    then
      debug "eval_typeline" "line <$cur> is of type ${type[$cur]}"
    fi
  done
  cur=0
}

_eval_newline()
{
  while read tl
  do
    cur+=1
    next=$((cur+1))

    if [ "${tl: -1}" == '\' ]
    then
      tl="${tl%'\'}"
      line[$cur]="${line[$cur]/*'\'/"$tl ${line[$next]}"}"
      type[$cur]="${type[$next]}"
      line[$next]=
      type[$next]="nospace"
      debug "eval_newline" "line <$cur> has a nextline indicator"
    fi
  done
  cur=0
}

_eval_notation()
{
  _snip()
  {
    _sym="${sym##*'$'}" _sym="${_sym%%[!a-zA-Z]}"
  }

  for sym in $(</dev/stdin)
  do
    case "$sym" in
      *'$@'[a-zA-Z]*)
        _snip
        name="${_sym#'@'}"
        _new_sym='{'"$name"'[@]}'
        ;;
      *'$#@'[a-zA-Z]*)
        _snip
        name="${_sym#'#@'}"
        _new_sym='{#'"$name"'[@]}'
        ;;
      *'$#['[0-9]*']'[a-zA-Z]*)
        _snip
        name="${_sym##*[!a-zA-Z]}"
        end="${_sym#'#['}" end="${end%%']'*}" end='['"$end"']'
        _new_sym='{#'"$name$end"'}'
        ;;
      *'$['[0-9]*']'[a-zA-Z]*)
        _snip
        name="${_sym##*[!a-zA-Z]}"
        end="${_sym#'['}" end="${end%%']'*}" end='['"$end"']'
        _new_sym='{'"$name$end"'}'
        ;;
    esac
    if [ ! ${#_new_sym} -eq 0 ]
    then
      sym="${sym/"$_sym"/"$_new_sym"}"
    fi
    echo -n "$sym "
  done |
  {
    stdin=$(</dev/stdin)
    echo "${stdin%' '}"
  }
}

if [ ! "$infile" == /dev/stdin ]
then
  touch "$infile"
fi

if [ ! "$out" == /dev/stdout ]
then
  touch "$out"
  if [ -n "$(<$out)" ] && [ ${#overwrite} -eq 0 ]
  then
    dontrm=1 fatal "file $out is not empty, use '-w' to overwrite"
  elif [ -n "$overwrite" ] && [ $overwrite -eq 1 ]
  then
    : >"$out"
  fi
fi

if ! flag "module" && [ ! "$out" == /dev/stdout ]
then
  debug "fs" "output file will have a shebang"
  out "#!/usr/bin/env bash"
fi

_DEBUG=0 _eval_typeline <<<"$src"
_eval_newline <<<"$(_print_line)"
_DEBUG=1 _eval_typeline <<<"$(_print_line)"

if flag "noticeFroyo"
then
  out "# $0 ${sys_args[@]}"
fi

_if_statement()
{
  # get eval/run type
  _type_parse

  if [ "$lt" == "suffixif" ]
  then
    # no need to add to nests
    return
  fi

  # set if statement
  eval "$lt"_nest+=1
}

_is_string()
{
  [ "${val_content::1}" == '"' ] && [ "${val_content: -1}" == '"' ]
}

_is_character()
{
  { [ "${val_content::1}" == "'" ] && [ "${val_content: -1}" == "'" ]; } || return 1
  val_content="${val_content#"'"}"
   val_content="${val_content%"'"}"

  if [ ${#val_content} -gt 1 ]
  then
    fatal "type <character> can only be 1 character long, not <${#val_content}>"
  fi
}

_is_integer()
{
  [ -z "${val_content//[0-9]}" ]
}

_is_float()
{
  [ "${val_content//[0-9]}" == "." ] && [ ! "${val_content::1}" == "." ] && [ "${val_content: -1}" == "." ]
}

_is_boolean()
{
  [ "$val_content" == "true" ] || [ "$val_content" == "false" ]
}

_is_pointer()
{
  [ "${val_content::1}" == "$" ]
}

_is_array()
{
  [ "${val_content::1}" == "[" ] && [ "${val_content: -1}" == "]" ] || return 1
  val_content="${val_content#"["}"
   val_content="${val_content%"]"}"

  val_content=("${val_content//', '/' '}")
  val_content="(${val_content[@]})"
}

_is_command()
{
  [ "${val_content::1}" == "(" ] && [ "${val_content: -1}" == ")" ] || return 1

  val_content="${val_content#'('}"
   val_content="${val_content%')'}"

  current="$val_content" _run_digest

  val_content='$('"$run_name $run_content"')'
}

_type_parse()
{
  if [ "${current::2}" == "((" ]
  then
    if_type="eval"

    content="${current##'(('}"
     content="${content%%'))'}"

    # pad if conditions
    content=" $content "

    # replace user symbols to `test` arguments
    content="${content//' < '/' -lt '}"
    content="${content//' > '/' -gt '}"
    content="${content//' <= '/' -le '}"
    content="${content//' >= '/' -ge '}"
    # use '==' for string comparisons
    content="${content//' = '/' -eq '}"
    content="${content//' != '/' -ne '}"

    # "de"-pad if condition
    content="${content##' '}"
    content="${content%%' '}"
  elif [ "${current::1}" == "(" ]
  then
    if_type="run"
    _run_digest
  else
    fatal "failed to determine type of code, supported are ['run', 'eval']"
  fi
}

_run_digest()
{
  run_name="${current%%'('*}"
  run_content="${current#"$run_name"}"
   run_content="${run_content//$'\n'}"
   run_content="${run_content##' '}"
   run_content="${run_content%%' '}"
   run_content="${run_content#'('}"
   run_content="${run_content%')'}"

  if ! flag "allowExternal" &&
     ! { ffunction "$run_name" || internal "$run_name" ;} &&
     ! [[ " ${subfunctions[@]} " == *" $run_name "* ]]
  then
    fatal "there is no shell builtin or external script to satisfy <'$run_name'>"
  elif [[ " ${subfunctions[@]} " == *" $run_name "* ]]
  then
    run_name=_"$run_name"
  fi

  if [[ "$run_content" =~ ", " ]]
  then
    run_args=(${run_content//', '/' '})
    run_content=
    for arg in ${run_args[@]}
    do
      run_content+="$arg "
    done
    # remove trailing space
    run_content="${run_content%' '}"
  fi
}

_attr_digest()
{
  for attr in ${val_attrs[@]}
  do
    case "$attr" in
      "string"|"str") val_type="string";;
      "character"|"char") val_type="character";;
      "integer"|"int") val_type="integer" prefix+=(-i);;
      "float") val_type="float";;
      "boolean"|"bool") val_type="boolean";;
      "command"|"cmd") val_type="command";;
      "pointer") val_type="pointer";;
      "array") val_type="array" prefix+=(-a);;
      "readonly"|"ro") val_ro=1 prefix+=(-r); debug "attr_digest" "<'$val_name'> is a constant";;
      "local") val_local=1; debug "attr_digest" "<'$val_name'> is a local value";;
      *) fatal "unknown attribute <'$attr'> provided for value <'$val_name'>";;
    esac
    debug "attr_digest" "<'$val_name'> is of type <'$val_type'>"
  done
}

_fn_args()
{
  fn_args="${current#*'('}"
   fn_args="${fn_args%')'}"

  fn_args=(${fn_args//', '/' '})

  declare -i argh=1
  for fn_arg in ${fn_args[@]}
  do
    if [[ " ${local_args[@]} " == *" $fn_arg "* ]]
    then
      fatal "value <'$fn_arg'> provided for function <'$fn_name'> is a local value"
    fi

    if [ ${fn_arg::1} == '"' ] && [ $argh -eq ${#fn_args[@]} ]
    then
      fn_arg="$(eval echo $fn_arg)"
      out "$fn_arg="'("$@")'
      break
    elif [ ${fn_arg::1} == '"' ]
    then
      fn_arg="$(eval echo $fn_arg)"
      out "$fn_arg="\"'$'1\""; shift"
    else
      out "$fn_arg="'$'1"; shift"
    fi
    argh+=1
  done
}

declare -A values
declare -A end_term

# builtins for endings for statements
end_term=(
  ["if"]="fi"
  ["loop"]="done"
  ["switch"]="esac"
  ["case"]=";;"
  ["fn"]=
)

declare -a functions

declare -i if_nest=0 \
           loop_nest=0 \
           fn_nest=0 \
           switch_nest=0 \
           case_nest=0 \
           else_nest=0 \
           elseif_nest=0 \
           subfn_nest=0

for lt in ${type[@]}
do
  cur+=1
  lt="${type[$cur]}"
  current="${line[$cur]}"

  fn_args=()
  prefix=()
  val_name=
  val_type=
  if_type=
  if_name=
  content=

  if [ ${#lt} -eq 0 ]
  then
    break
  fi

  case "$lt" in
    "out")
      out "$current"
      ;;
    "head")
      out
      ;;
    # do nothing since line is empty
    "nospace")
      :
      ;;
    "sl_comment")
      if flag "comments"
      then
        val_content="${current#"//"}"
        out "#$val_content"
      fi
      ;;
    "ml_comment")
      if flag "comments"
      then
        if [ "${current: -2}" == "*/" ]
        then
          val_content="${current%'*/'}"
        elif [ "${current::2}" == "/*" ]
        then
          val_content="${current#'/*'}"
        elif [ "${current::1}" == "*" ]
        then
          val_content="${current#'*'}"
        else
          val_content="$current"
        fi
        if [ ! ${#val_content} -eq 0 ]
        then
          out "#$val_content"
        fi
      fi
      ;;
    "include")
      include="${current#"include "}"

      for s in $include
      do
        if [[ "$s" == "-"[a-z] ]] || [[ "$s" == "--"[a-z]* ]]
        then
          include_args+=("$s")
          include="${include/"$s "}"
        fi
      done

      local_inc=0
      file_path=0

      for arg in ${include_args[@]}
      do
        if [ "$arg" == "-l" ] || [ "$arg" == "--local" ]
        then
          local_inc=1
        fi
        if [ "$arg" == "-f" ] || [ "$arg" == "--file-path" ]
        then
          file_path=1
        fi
      done

      if [ $file_path -eq 1 ] && [ $local_inc -eq 1 ]
      then
        fatal "conflicting arguments <'local'> and <'file-path'> provided in include"
      fi

      if [ $file_path -eq 1 ]
      then
        if [ ! -f "$include" ]
        then
          warn "file path provided <'$include'> for include statement does not exist"
        fi
        out ". $include"
        continue
      fi

      if [ -f "$libfy"/ext/"$include".sh ]
      then
        if [ $local_inc -eq 1 ]
        then
          out ". $libfy/ext/$include".sh
        else
          out "# module included @ $libfy/ext/$include.sh"
          out "$(<"$libfy"/ext/"$include".sh)"
        fi
        functions+=("$include")
      elif [ -f "$include" ]
      then
        if [ $local_inc -eq 1 ]
        then
          out '$(<'"$include"')'
        else
          out "# file included @ $include"
          out "$(<$include)"
        fi
      else
        fatal "missing external module <'$include'> from $libfy/ext"
      fi
      ;;
    "function")
      current="${current#*' '}"
      fn_name="${current%'('*}"

      functions+=("$fn_name")
      out "$fn_name()"
      out "{"

      _fn_args

      prev_parent_fn="$parent_fn"
      parent_fn="$fn_name"

      fn_nest+=1
      nest+=("fn")
      ;;
    "subfn")
      current="${current#*' '}"
      fn_name=_"${current%'('*}"

      if [ ${#parent_fn} -eq 0 ]
      then
        fatal "subfunction <'${fn_name#_}'> must have a parent function"
      fi

      subfunctions+=("${fn_name#_}")
      out "$fn_name()"
      out "{"

      _fn_args
      local_args+=(${fn_args[@]})

      subfn_nest+=1
      nest+=("subfn")
      ;;
    "codeblock")
      if [ ! "${current::1}" == "{" ]
      then
        out "$current"
      fi
      ;;
    "endblock")
      _last_nest()
      {
        if [ ${#nest[@]} -eq 0 ]
        then
          return 1
        else
          echo -n "${nest[-1]}"
        fi
      }
      for term in if loop fn subfn
      do
        if [ "$term" == "fn" ]
        then
          parent_fn="$prev_parent_fn"
        fi
        if [ "$(_last_nest)" == "$term" ]
        then
          out "} ${end_term["$term"]}"
          # this was the nicest way I could find to remove the last
          # occurance in the array, sorry!
          # (thanks stack overflow)
          # (https://stackoverflow.com/questions/8247433/remove-the-last-element-from-an-array)
          unset 'nest[-1]'
          break
        fi
      done
      for sterm in switch case
      do
        if [ "$(_last_nest)" == "$sterm" ]
        then
          out "${end_term["$sterm"]}"
          unset 'nest[-1]'
          break
        fi
      done
      ;;
    "suffixif")
      current="${current#*" if "}" _if_statement

      case "$if_type" in
        "eval")
          out "if [[ $content ]]"
          ;;
        "run")
          out "if { $run_name $run_content ;}"
          ;;
      esac

      current="${current%" if"*}" _run_digest
      out "then {"
      out "$run_name $run_content"
      out "}"
      out "fi"
      ;;
    "if")
      current="${current#*"if "}"
      _if_statement

      case "$if_type" in
        "eval")
          out "if [[ $content ]]"
          ;;
        "run")
          out "if { $run_name $run_content ;}"
          ;;
      esac
      out "then {"
      nest+=("if")
      ;;
    "elseif")
      current="${current#*"else if "}"

      _if_statement

      out "}"
      case "$if_type" in
        "eval")
          out "elif [[ $content ]]"
          ;;
        "run")
          out "elif { $run_name $run_content ;}"
          ;;
      esac
      out "then {"
      ;;
    "else")
      out "}"
      out "else {"
      ;;
    "while")
      current="${current#"while"}"
      _type_parse

      case "$if_type" in
        "eval")
          out "while [[ $content ]]"
          ;;
        "run")
          out "while { $run_name $run_content ;}"
          ;;
      esac
      out "do {"
      loop_nest+=1
      nest+=("loop")
      ;;
    "switch")
      current="${current#"switch"}"
      match="${current#'('}"
       match="${match%')'}"

      out "case $match in"
      switch_nest+=1
      nest+=("switch")
      ;;
    "case")
      current="${current#"case"}"
      match="${current#'('}"
       match="${match%')'}"

      if [ ${#match} -eq 0 ]
      then
        match='*'
      fi

      if [ $switch_nest -eq 0 ]
      then
        fatal "the builtin <'case'> must only be used in a <'switch'> statement"
      fi

      out "$match)"
      case_nest+=1
      nest+=("case")
      ;;
    "foreach")
      val_name="${current#"foreach("}"
        val_name="${val_name%','*}"
      val_loop="${current#*'('}"
       val_loop="${val_loop%')'*}"
       val_loop="${val_loop#*', '}"

      out "for $val_name in $val_loop"
      out "do {"
      loop_nest+=1
      nest+=("loop")
      ;;
    "define")
      val_name="${current%: *}"
      val_attrs="${current#*: }"
       val_attrs=(${val_attrs//', '/' '})

      _attr_digest

      if [ -n "$val_ro" ] && [ $val_ro -eq 1 ]
      then
        case "$val_type" in
          "boolean"|"command"|"pointer"|"array")
            fatal "type <'$val_type'> cannot be empty and readonly"
            ;;
        esac
        warn "setting empty readonly variable"
      fi

      out "declare" "${prefix[@]}" "$val_name"
      ;;
    "value")
      val_name="${current% *= *}"
      val_content="${current#* = }"

      for type in ${TYPES[@]}
      do
        if _is_"$type"
        then
          val_type="$type"
          break
        else
          continue
        fi
      done

      if [ -z "$val_type" ]
      then
        fatal "failed to determine type of value <'$val_name'>"
      fi

      values["$val_type"]+="$val_name "
      out "$val_name=$val_content"
      ;;
    "value_attr")
      val_name="${current%%' '*}"
       val_name="${val_name%':'}"
      val_attrs="${current#"$val_name: "}"
        val_attrs="${val_attrs% *= *}"
        val_attrs=("${val_attrs//','}")
      val_content="${current#"$val_name: ""${val_attrs[@]//' '/', '}" *= }"

      _attr_digest

      if [ -n "$val_type" ] && ! _is_"$val_type"
      then
        fatal "incorrect type <$val_type> specified for <$val_name>"
      elif [ ${#val_type} -eq 0 ]
      then
        for type in ${TYPES[@]}
        do
          if _is_"$type"
          then
            val_type="$type"
            break
          fi
        done
      fi

      if [ -z "$val_type" ]
      then
        fatal "$val_name is of type character, which can only have a length of 1 character" \
              $'\n'"are you looking for a string instead?"
      fi

      if [ -n "$val_local" ] && [ $val_local -eq 1 ]
      then
        out "local" "$val_name"
      fi

      values["$val_type"]+="$val_name "
      out "declare" "${prefix[@]}" "$val_name=$val_content"
      ;;
    "append")
      if [ "${current#*' '}" == "++" ]
      then
        val_name="${current%" ++"}"
        out "$val_name+=1"
      else
        val_name="${current%%' += '*}"
        val_add="${current#*' += '}"
  
        if [[ " ${values["string"]} " == *" $val_name "* ]]
        then
          out "$val_name+="'"'"$val_add"'"'
        else
          out "$val_name+=$val_add"
        fi
      fi
      ;;
    "run")
      _run_digest

      out "$run_name" "$run_content"
      ;;
    "pipe")
      out "$(current="${current%'|'*}" _run_digest; echo -n "$run_name" "$run_content")"' | ' \
          "$(current="${current#*'|'}" _run_digest; echo "$run_name" "$run_content")"
      ;;
  esac
done

# if no code is given on the last line after defining a main function
# then add a line to execute `main`
if [ "${type[-1]}" == "endblock" ] && [ "${functions[-1]}" == "main" ]
then
  out "main"
fi

if [ ! "$out" == /dev/stdout ]
then
  chmod +x "$out"
fi
